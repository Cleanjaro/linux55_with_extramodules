# Maintainer: David Spink <yorper_protonmail.com>

# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

pkgbase=linux55
pkgname=('linux55' 'linux55-headers')
_kernelname=-CLEANJARO
_basekernel=5.5
_sub=15
pkgver=${_basekernel}.${_sub}
pkgrel=1
arch=('x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'elfutils' 'git')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v5.x/linux-${_basekernel}.tar."{xz,sign}
        "http://www.kernel.org/pub/linux/kernel/v5.x/patch-${pkgver}.xz"
        'config.x86_64'
        # ARCH Patches
        '0001-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch'
        '0002-iwlwifi-pcie-restore-support-for-Killer-Qu-C0-NICs.patch'
        '0003-drm-Remove-PageReserved-manipulation-from-drm_pci_alloc.patch'
        '0004-drm-i915-Serialise-i915_active_acquire-with__active_retire.patch'
        '0005-drm-i915-gem-Take-runtime-pm-wakeref-prior-to-unbinding.patch'
        '0006-drm-i915-gem-Avoid-parking-the-vma-as-we-unbind.patch'
        '0007-drm-i915-gem-Try-to-flush-pending-unbind-events.patch'
        '0008-drm-i915-gem-Reinitialise-the-local-list-before-repeating.patch'
        '0009-drm-i915-Add-a-simple-is-bound-check-before-unbinding.patch'
        '0010-drm-i915-Introduce-a-vma.kref.patch'
        # Cleanjaro Patches
        '0001-futex-wait-multiple-5.3.patch'
        '0002-fix-zfs-build.patch'
        # AMD navi 10 reset quirk
        '0001-nonupstream-navi10-vfio-reset.patch'
        )
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)
sha256sums=('a6fbd4ee903c128367892c2393ee0d9657b6ed3ea90016d4dc6f1f6da20b2330'
            'SKIP'
            '938b47e8e6c8e7ee091d0da149eab7cc63f3858bc7cc043ed4963771dc621b90'
            '71362cdc9566a7d890d846193cb93bbddd409f8b958a82a2e066aa45414d1f3f'
            '7685d526bbdbfa795986591a70071c960ff572f56d3501774861728a9df8664c'
            'b8e016738f390ac7e0750da3c5147ecd20b89f7d58ba03649f3b8dbe983b5640'
            '4246a2a84a578c253b79cb5f38889399015f3f7656c7de98f4a2573bc93d71ab'
            '2234d16705b8e9a5ae1b7e9071b76eb987c9011218fd9dcf98e087aea1aed65b'
            '3216310ead1b3e21379a12f22113345133d4276193415ab165bdf0c2c48e0037'
            '6e8cb589b8541b4fdc765e261afccefbe00dc9966baba630eb34cd1b1c98df98'
            'e3aa2d8f878de03f162a23bcbfdda3f9bcd64c1091c49a52764112670353cd76'
            '57f98090492dcdad1ed8d83379d10416c3f9cf84bb0dd8a478f920a65fcbed0a'
            '4040a98a2cfbad14fda31d4341358d4e86ee1f76fcffb9f44950a05ca8092eb0'
            '7ed0a8aaadebf6c0694bb67bc36bbd715384d006778f7e4a05d2e1f40b117c1f'
            '4524a38401f997dbde577e76f2ec2ea77957a74edf3a6939013c8178cd65e476'
            'c6b9a5213762e6184c7a1405ccca08048d419d7e7795ecdd310414be886d72c5'
            '7a2758f86dd1339f0f1801de2dbea059b55bf3648e240878b11e6d6890d3089c')
prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${pkgver}"

  # Arch Patches
  # disable USER_NS for non-root users by default
  patch -Np1 -i '../0001-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch'
  # More Arch Patches
  patch -Np1 -i '../0002-iwlwifi-pcie-restore-support-for-Killer-Qu-C0-NICs.patch'
  patch -Np1 -i '../0003-drm-Remove-PageReserved-manipulation-from-drm_pci_alloc.patch'
  patch -Np1 -i '../0004-drm-i915-Serialise-i915_active_acquire-with__active_retire.patch'
  patch -Np1 -i '../0005-drm-i915-gem-Take-runtime-pm-wakeref-prior-to-unbinding.patch'
  patch -Np1 -i '../0006-drm-i915-gem-Avoid-parking-the-vma-as-we-unbind.patch'
  patch -Np1 -i '../0007-drm-i915-gem-Try-to-flush-pending-unbind-events.patch'
  patch -Np1 -i '../0008-drm-i915-gem-Reinitialise-the-local-list-before-repeating.patch'
  patch -Np1 -i '../0009-drm-i915-Add-a-simple-is-bound-check-before-unbinding.patch'
  patch -Np1 -i '../0010-drm-i915-Introduce-a-vma.kref.patch'

  # Cleanjaro Patches
  patch -Np1 -i '../0001-futex-wait-multiple-5.3.patch'
  patch -Np1 -i '../0002-fix-zfs-build.patch'

  # TODO: remove when AMD properly fixes it!
  # INFO: this is a hack and won't be upstreamed
  # https://forum.level1techs.com/t/145666/86
  patch -Np1 -i '../0001-nonupstream-navi10-vfio-reset.patch'

   cat "${srcdir}/config.x86_64" > ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null
  #yes "" | make config >/tmp/new-config
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux55() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=27' 'linux55-headers')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}")

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"

  mkdir -p "${pkgdir}"/{boot,usr/lib/modules}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}/usr" modules_install

  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  cp arch/$KARCH/boot/bzImage "${pkgdir}/usr/lib/modules/${_kernver}/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "${pkgbase}" | install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_kernver}/pkgbase"
  echo "${_basekernel}-${CARCH}" | install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_kernver}/kernelbase"

  # add kernel version
  echo "${pkgver}-${pkgrel}-CLEANJARO x64" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname:--CLEANJARO}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

  # add vmlinux
  install -Dt "${pkgdir}/usr/lib/modules/${_kernver}/build" -m644 vmlinux
}

package_linux55-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("linux-headers=$pkgver")

  cd "${srcdir}/linux-${_basekernel}"
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 "arch/${KARCH}/Makefile"
  install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 "arch/${KARCH}/kernel/asm-offsets.s"
  #install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 "arch/${KARCH}/kernel/macros.s"

  cp -t "${_builddir}/arch/${KARCH}" -a "arch/${KARCH}/include"

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  if [ "${CARCH}" = "x86_64" ]; then
    # add objtool for external module building and enabled VALIDATION_STACK option
    install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool
  fi

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */x86/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}
